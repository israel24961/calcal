import { JSX, useContext, useEffect, useRef, useState } from 'react';
import { CalendarContext, DateInterval } from './ctx';
import { intervalToDuration } from 'date-fns';

function humanDuration(time: number): string {
    if (time < 60) return '<1m';

    const { days, hours, minutes, seconds } = intervalToDuration({ start: 0, end: time * 1000 });

    const parts = [];
    if (days) parts.push(`${days}d`);
    if (hours) parts.push(`${hours}h`);
    if (minutes) parts.push(`${minutes}m`);
    if (seconds && time >= 60) parts.push(`${seconds}s`);

    return parts.join('');
}

const paletteColors = [
    '#f87171', // red-400
    '#fbbf24', // yellow-400
    '#34d399', // green-400
    '#60a5fa', // blue-400
    '#a78bfa', // purple-400
    '#f472b6', // pink-400
    '#fcd34d', // amber-400
    '#8b5cf6', // violet-400
    '#fca5a5', // rose-400
    '#a3e635', // lime-400
];

export function Calendar(): JSX.Element {
    const calendarContext = useContext(CalendarContext);
    return <div className="calendar">
        <h2>Calendar</h2>
        <CalendarTodayIntervals />
        <button className="mouse" onClick={() => {
            console.log('Adding interval');
            calendarContext.addInterval({} as DateInterval);
        }} > Add Interval</button>
    </div>
}

function CalendarTodayIntervals(): JSX.Element {
    const calendarContext = useContext(CalendarContext);
    const [curDate, setCurDate] = useState(new Date());
    const intervals = calendarContext.getIntervals(curDate);

    useEffect(() => {
        let intervalId: NodeJS.Timeout;
        let timeoutId: NodeJS.Timeout;
        const tick = () => {
            setCurDate(new Date());
        };

        const setup = () => {
            tick(); // update immediately
            const now = new Date();
            const msUntilNextMinute =
                (60 - now.getSeconds()) * 1000 - now.getMilliseconds();

            // Set timeout to align with the start of the next minute
            timeoutId = setTimeout(() => {
                tick();
                // Now set an interval to update every full minute
                intervalId = setInterval(tick, 60 * 1000);
            }, msUntilNextMinute);
        };

        setup();

        return () => {
            clearTimeout(timeoutId);
            clearInterval(intervalId);
        };
    }, []);

    return <div className="today-intervals">
        <h3>Today's Intervals ({intervals.length}) - ({curDate.getHours().toString().padStart(2, '0')}:{curDate.getMinutes().toString().padStart(2, '0')})</h3>
        <button onClick={() => {
            calendarContext.setIsStopLastIntervalOnAdd(!calendarContext.getIsStopLastIntervalOnAdd());
        }}> {calendarContext.getIsStopLastIntervalOnAdd() ? 'Allowing only one to run' : 'Allowing multiple to run'} </button>
        {intervals.length === 0 ? <p>No intervals for today</p> :
            intervals.map((interval, index) => (
                <CalendarOneInterval key={index} interval={interval} />
            ))}
    </div>;
}
function CalendarOneInterval(props: { interval: DateInterval, key: number }): JSX.Element {
    const calendarContext = useContext(CalendarContext);
    const [originalInterval] = useState<DateInterval>(props.interval);
    const [intervalState, setIntervalState] = useState(props.interval);

    const [isEditing, setIsEditing] = useState(false);
    useEffect(() => {
        setIntervalState(props.interval);
    }, [props.interval]);
    const CrudIcons = () => <div className="flex flex-col items-center justify-center">
        <button className="edit"
            title="Edit Interval"
            style={{ marginLeft: '10px', padding: '5px' }}
            onClick={() => {
                console.log('Editing interval', intervalState);
                setIsEditing(true);
            }}>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill={`${intervalState.end ? 'gray' : 'currentColor'}`}
                className="bi bi-pencil-square" viewBox="0 0 16 16">
                <path d="M15.502 1.94a1.5 1.5 0 0 0-2.12 0l-1.415 1.414a1.5 1.5 0 0 0 0 2.121l2.121 2.121a1.5 1.5 0 0 0 2.121 0l1.414-1.414a1.5 1.5 0 0 0 0-2.121L15.502 1.94zM13.88 4.06L11.76 6.18l-2-2L11.88 2a1.5 1.5 0 0 1 .212-.212l1.414-1.414a1.5 1.5 0 0 1 .212-.212l-.212-.212zM14.5 16H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h8a2 2 0 0 1 .707.293l3.5 3.5A2 2 0 0 1 14.5 6v8a2 2 0 0 1-2 .707V16zM3 .5A2.5 2.5 0 0 0 .5 3v10a2.5 2.5 0 0 0 .146.854L3 .854V16h11V6H4V3H3v-.5z" />
            </svg>
        </button>
        <button className="delete" style={{ marginLeft: '10px', padding: '5px' }}
            title="Delete Interval"
            onClick={() => {
                console.log('Deleting interval', intervalState);
                const identifier = calendarContext.deleteInterval(intervalState);
                if (!identifier)
                    console.log('Interval deleted', identifier);
            }}>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill={`${intervalState.end ? 'gray' : 'currentColor'}`} className="bi bi-trash" viewBox="0 0 16 16">
                <path d="M5.5 5.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5h-4a.5.5 0 0 1-.5-.5v-6zM14 3H2v1h12V3zm-1-2H3a1 1 0 0 0-1 1v1h12V2a1 1 0 0 0-1-1zM3.118 4L2.39 14.39A2 2 0 0 0 4.39 16h7.22a2 2 0 0 0 2-1.61L12.882 4H3.118z" />
            </svg>
        </button>
    </div>;
    const themeWhenEditing = 'bg-yellow-100 dark:bg-yellow-800 text-red-800 dark:text-red-200 border-red-500 dark:border-red-300';
    // If ended, disabled look
    const themeWhenNotEditing = intervalState.end ? 'text-gray-500 dark:text-gray-400 border-gray-300 dark:border-gray-600 ' +
        'cursor-not-allowed' : '';

    function hash(text: string): number {
        if (!text) return 0

        let state = 13 // prime
        for (let index = 0; index < text.length; index++) {
            const charCode: number = text.charCodeAt(index);
            state += state * charCode;
            // Prevent overflow by %
            state %= (charCode * 3109) // prime
        }
        return state;
    }
    const msgColorLabel = paletteColors[hash(intervalState.msg) % paletteColors.length];
    console.log('msgColorLabel for', intervalState.msg, 'is', msgColorLabel);

    // If the interval has an end time, calculate the elapsed time in seconds, else with the current time
    const elapsedTime: number | null = intervalState.end
        ? (intervalState.end.getTime() - intervalState.start.getTime()) / 1000
        : (new Date().getTime() - intervalState.start.getTime()) / 1000;


    return <>
        {isEditing ?
            <div className={`${themeWhenEditing}`}>
                <CalendarOneIntervalEdit interval={intervalState}
                    onSave={(interval) => {
                        console.log('Saving start HH:mm', interval.start.toLocaleTimeString(), 'end HH:mm', interval.end ? interval.end.toLocaleTimeString() : 'No end time');
                        setIntervalState(interval);
                        return interval.identifier;
                    }}
                    onStoppedEditing={(identifier) => {
                        console.log('Stopped editing interval, saving into calendar context', intervalState);
                        calendarContext.updateInterval(intervalState);
                        setIsEditing(false);
                    }}
                    onCancel={() => {
                        console.log('Cancelling edit, restoring original interval', originalInterval);
                        setIntervalState(originalInterval);
                        setIsEditing(false);
                    }}
                />
            </div>
            : <div className={`flex flex-row ${isEditing ? themeWhenEditing : themeWhenNotEditing} `}>
                <div > {humanDuration(elapsedTime || 0)} </div>
                <div className="interval" onClick={() => { setIsEditing(!isEditing); }}>
                    <p>{intervalState.start.toLocaleTimeString()} -- {intervalState.end ? intervalState.end.toLocaleTimeString() : 'No end time'}</p>
                </div>
                <CrudIcons />
                <div>
                    {intervalState.msg && intervalState.msg.length > 0 &&
                        <span
                            style={{ backgroundColor: msgColorLabel }}
                            className='inline-flex items-center rounded-md  px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-gray-500/10 ring-inset'>
                            {intervalState.msg}
                        </span>
                    }
                </div>
            </div>
        }
    </>
}
function CalendarOneIntervalEdit(props: { interval: DateInterval, onSave: (interval: DateInterval) => string, onStoppedEditing: (identifier: string) => void, onCancel: () => void }): JSX.Element {
    const node = useRef<HTMLDivElement>(null);
    const calendarContext = useContext(CalendarContext);

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (node && node.current && !node.current.contains(event.target as Node)) {
                props.onStoppedEditing(props.interval.identifier);
            }
        }
        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        }
    }, [props.interval]);

    useEffect(() => { // Focus on the first input when editing starts
        if (node && node.current) {
            const inputs = node.current.querySelectorAll('input');
            if (inputs.length > 0) {
                (inputs[0] as HTMLInputElement).focus();
            }
        }
    }, []);

    const [descriptOptions, setDescriptOptions] = useState<string[]>();

    const handleDescriptionSelect = () => {
        const descriptions = calendarContext.getDescriptions();
        if (descriptions.length > 0) {
            setDescriptOptions(descriptions);
        } else {
            setDescriptOptions(['No descriptions available']);
        }
    };

    const handleChangeSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {
        const value = e.target.value;
        props.onSave({ ...props.interval, msg: value });
        // setIntervalState(prev => ({ ...prev, msg: value }));
    };


    return <div className="interval-edit" style={{ display: 'flex', flexDirection: 'row', gap: '10px' }} ref={node}
        onKeyDown={(e) => {
            if (e.key === 'Enter') {
                const identifier = props.onSave(props.interval);
                props.onStoppedEditing(identifier);
            }
        }} >
        Start: <EditableDateInHoursMinutes date={props.interval.start} canBeEmpty={false}
            onChange={(date) => {
                if (!date) {
                    alert('Start date is required');
                    return;
                }
                const newInterval = { ...props.interval, start: date };
                props.onSave(newInterval);
            }} /> End:
        <EditableDateInHoursMinutes date={props.interval.end || null} onChange={(date) => {
            const newInterval = { ...props.interval, end: date };
            props.onSave(newInterval);
        }} canBeEmpty={true} />
        <input className="msg" style={{ marginLeft: '10px', padding: '5px' }}
            type="text" value={props.interval.msg || ''}
            onChange={(e) => {
                const newInterval = { ...props.interval, msg: e.target.value };
                calendarContext.updateInterval(newInterval);
                props.onSave(newInterval);
            }} />
        <select
            className="text-sm"
            onMouseDown={handleDescriptionSelect}
            onChange={handleChangeSelect}
            value={''}
        >
            <option value="">Select Description</option>
            {descriptOptions && descriptOptions.map((desc, index) => (
                <option key={index} value={desc}>{desc}</option>
            ))}
        </select>
    </div>
}

function EditableDateInHoursMinutes(props: { date: Date | null, onChange: (date: Date | null) => void, canBeEmpty: boolean }): JSX.Element {
    return <div className="editable-date" >
        <input type="text" className="flex-grow min-w-[5em] px-1 py-0.5 border rounded"
            value={props.date ? props.date.getHours() : ''} onChange={(e) => {
                const newDate = new Date(props.date ? props.date : new Date());
                if (!e.target.value || e.target.value === '') {
                    if (props.canBeEmpty) {
                        props.onChange(null);
                    }
                    else {
                        newDate.setHours(0);
                        console.log("Hours changed to", newDate.getHours());
                        props.onChange(newDate);
                    }
                }
                else if (24 <= parseInt(e.target.value)) {
                    alert('Hours must be between 0 and 23');
                }
                else if (parseInt(e.target.value) < 0) {
                    alert('Hours must be between 0 and 23');
                    newDate.setHours(0);
                    props.onChange(newDate);
                }
                else {
                    newDate.setHours(parseInt(e.target.value));
                    props.onChange(newDate);
                }
            }} min={0} max={23} size={2} />
        <input className="flex-grow min-w-[2em] px-1 py-0.5 border rounded"
            type="text" value={props.date ? props.date.getMinutes() : ''}
            min={0} max={59} size={2} onChange={(e) => {
                const newDate = new Date(props.date ? props.date : new Date());
                if (!e.target.value || e.target.value === '') {
                    console.log("Minutes changed to", newDate.getMinutes());
                    newDate.setMinutes(0);
                    props.onChange(newDate);
                }
                else if (60 < parseInt(e.target.value) || parseInt(e.target.value) < 0) {
                    alert('Minutes must be between 0 and 59');
                }
                else {
                    console.log("Minutes changed toParen", parseInt(e.target.value));
                    newDate.setMinutes(parseInt(e.target.value));
                    props.onChange(newDate);
                }
            }} />
    </div>;
}
